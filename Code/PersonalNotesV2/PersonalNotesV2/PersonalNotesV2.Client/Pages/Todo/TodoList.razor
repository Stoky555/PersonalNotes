@using PersonalNotesV2.Models.Todo.Enums
@using PersonalNotesV2.Shared.Models.Todo

@if(TodoItemsList.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th scope="col">Rank</th>
                <th scope="col">Title</th>
                <th scope="col">Description</th>
                <th scope="col">Due date</th>
                <th scope="col">Status</th>
                <th scope="col">Priority</th>
                @* <th scope="col">UpdatedDate</th> *@
                <th scope="col">CreatedDate</th>
                @* <th scope="col">id</th> *@
                <th scope="col">Edit</th>
                <th scope="col">Change rank</th>
                <th scope="col">DELETE</th>
            </tr>
        </thead>
        <tbody>
            @foreach (TodoItem item in TodoItemsList)
            {
                @if (item.Priority == TodoItemPriority.High)
                {
                    rowColor = "table-danger";
                }
                else if (item.Priority == TodoItemPriority.Medium)
                {
                    rowColor = "table-warning";
                }
                else if (item.Priority == TodoItemPriority.Low)
                {
                    rowColor = "table-primary";
                }

                <tr>
                    <th scope="row">@item.Rank</th>
                    <td>@item.Title</td>
                    <td>@item.Description</td>
                    <td>@item.DueDate</td>
                    <td>@item.Status</td>
                    <td class="@rowColor">@item.Priority</td>
                    @* <td>@item.UpdatedDate</td> *@
                    <td>@item.CreatedDate</td>
                    @* <td>@item.Id</td> *@
                    <td>
                        @if (editingItemId == item.Id)
                        {
                            <button @onclick="CloseEditWindow" type="button" class="btn btn-outline-Warning">Close edit</button>
                        }
                        else
                        {
                            <button @onclick="@( () => UpdateTodoTask(item.Id) )" type="button" class="btn btn-outline-primary">Edit</button>
                        }
                    </td>
                    <td>
                        @{
                            if (TodoItemsList.Count == 1)
                            {
                                <p>-</p>
                            }
                            else if (item.Rank == 1)
                            {
                                <button @onclick="@( () => DemoteRank(item.Id) )" class="btn btn-outline-primary">v</button>
                            }
                            else if (TodoItemsList.Count == item.Rank)
                            {
                                <button @onclick="@( () => PromoteRank(item.Id) )" class="btn btn-outline-primary">^</button>
                            }
                            else
                            {
                                <button @onclick="@( () => PromoteRank(item.Id) )" class="btn btn-outline-primary">^</button>
                                <button @onclick="@( () => DemoteRank(item.Id) )" class="btn btn-outline-primary">v</button>
                            }
                        }
                    </td>
                    <td>
                        <button @onclick="@( () => DeleteThisRow(item.Id) )" type="button" class="btn btn-outline-danger">DELETE</button>
                    </td>
                </tr>
                @if (editingItemId == item.Id)
                {
                    <TodoItemEdit TodoItem="TodoItemsList.FirstOrDefault(item => item.Id == editingItemId)"></TodoItemEdit>
                    editingItemId = Guid.Empty;
                }

                rowColor = "";
            }
        </tbody>
    </table>
}


@code {
    public TodoItem TodoItem = new TodoItem();
    public List<TodoItem> TodoItemsList = new List<TodoItem>();
    public Guid editingItemId = Guid.Empty;
    public DateTime normalizedDate = DateTime.Now;
    public string rowColor = "";

    public void UpdateTodoTask(Guid id)
    {
        // Set the editing item ID to the clicked row's ID
        editingItemId = id;

        // Find the item being edited and populate the form fields
        TodoItem = TodoItemsList.FirstOrDefault(item => item.Id == editingItemId);
    }

    public void CloseEditWindow()
    {
        editingItemId = Guid.Empty;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    public async void PromoteRank(Guid id)
    {
        await TodoItemService.UpdateRankUpOfTodoItem(id);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    public async void DemoteRank(Guid id)
    {
        await TodoItemService.UpdateRankDownOfTodoItem(id);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    public async void DeleteThisRow(Guid id)
    {
        await TodoItemService.DeleteTodoItemAsync(id);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        if(this.TodoItemsList.Count == 0)
        {
            var todoItemsUnordered = await TodoItemService.GetTodoItemsFromContextAsyncAsync();
            this.TodoItemsList = todoItemsUnordered.OrderBy(r => r.Rank).ToList();
        }
    }
}